{
  "hash": "186255b5afc3ab6f04f801da036fa77d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Quarto Academic Typst\nsubtitle: A Minimalistic Quarto + Typst Template for Academic Writing\nheader: Please click [HERE](https://kazuyanagimoto.com/quarto-academic-typst/template-full.pdf) for the latest version.\nauthor:\n  - name: Kazuharu Yanagimoto\n    email: kazuharu.yanagimoto@cemfi.edu.es\n    orcid: 0009-0007-1967-8304\n    affiliations:\n      - name: CEMFI\nabstract: |\n  Las masa de pizza de Marcelo x\nthanks: |\n  This template is inspired by Kieran Healy's [LaTeX and Rmd template](https://github.com/kjhealy/latex-custom-kjh) and\n  Andrew Heiss's [Hikmah Quarto template](https://github.com/andrewheiss/hikmah-academic-quarto).\nkeywords: [Quarto, Typst, format]\ncustom-keywords:\n  - name: JEL Codes\n    values: [J16, J22, J31]    \ndate: today\ndate-format: full\nbibliography: references.bib\nformat:\n  academic-typst:\n    section-numbering: \"1.1.1\"\n    font-paths: [\"./static/fonts\"]\n    mainfont: \"Libertinus Serif\"\n    sansfont: Jost\n    mathfont: \"Libertinus Math\"\n    bibliographystyle: \"chicago-author-date\"\n    include-in-header:\n      - text: '#import \"@preview/mitex:0.2.4\": *'\nexecute: \n  echo: false\n  warning: false\n---\n\n\n\nThis document shows a practical usage of the template.\nI use the Palmer penguins dataset [@horst2020] to demonstrate the features of the template.\nThe code is available [here](https://kazuyanagimoto.com/quarto-academic-typst/template-full.qmd).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# Section as Heading Level 1\n\nSection numbering can be specified in the YAML `section-numbering` field\nas other Typst templates.\n\n## Subsection as Heading Level 2\n\nYou can use LaTeX math expressions:\n\n$$\nY_{it} = \\alpha_i + \\lambda_t + \\sum_{k \\neq -1} \\tau_h \\mathbb{1}\\{E_i + k = t\\} +\n\\varepsilon_{it}.\n$$\n\nI choose a mathematical font which supports the indicator function $\\mathbb{1}\\{\\cdot\\}$.\nCurrently, I use the {{< meta mathfont >}} font.\n\n### Subsubsection as Heading Level 3\n\nI don't use and don't recommend using heading levels 3 and below but it works.\n\n## Citation\n\nYou can cite a reference like this [@katsushika1831] or @horst2020.\nTypst has some built-in citation styles. Check the [Typst documentation](https://typst.app/docs/reference/model/bibliography/#parameters-style) for more information.\n\n# Figures and Tables\n\n## Figures\n\nAs @fig-facet shows, the caption is displayed below the figure.\nAs a caption of the figure (`fig-cap`), I use bold text for the title and use a normal text for the description.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![**Flipper Length and Bill Length of Penguins**.\nThe x-axis shows the flipper length, and the y-axis shows the bill length.](template-full_files/figure-typst/fig-facet-1.svg){#fig-facet}\n:::\n:::\n\n\n\nWhen I want to show multiple figures side by side, I use the `patchwork` package.\nThe reason why I don't use the `layout-col` option is that the caption is also split into two parts.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![**Characteristics of Penguins**.\nThe left panel shows the relationship between flipper length and body mass.\nThe right panel shows the density of flipper length.](template-full_files/figure-typst/fig-patchwork-1.svg){#fig-patchwork}\n:::\n:::\n\n\n\n\n## Tables\n\nYou can use [tinytable](https://vincentarelbundock.github.io/tinytable/)\nfor general tables and [modelsummary](https://vincentarelbundock.github.io/modelsummary/) for regression tables.\nAs @tbl-sum-penguins shows, the caption is displayed above the table.\nThe notes of the table can be added using the `notes` argument of the `tinytable::tt()` function.\n\n\n\n::: {#tbl-sum-penguins .cell tbl-cap='Summary Statistics of Penguins'}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#let nhead = 2;\n#let nrow = 3;\n#let ncol = 9;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4),), ),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, left, left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    column-gutter: 5pt,\n    columns: (auto, auto, auto, auto, auto, auto, auto, auto, auto),\n    stroke: none,\n    align: (x, y) => {\n      let sarray = style-array.filter(a => \"align\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().align\n      } else {\n        left\n      }\n    },\n    fill: (x, y) => {\n      let sarray = style-array.filter(a => \"background\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().background\n      }\n    },\n table.hline(y: 2, start: 0, end: 9, stroke: 0.05em + black),\n table.hline(y: 5, start: 0, end: 9, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 9, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[ ],table.cell(stroke: (bottom: .05em + black), colspan: 4, align: center)[Male],table.cell(stroke: (bottom: .05em + black), colspan: 4, align: center)[Female],\n[], [Bill Length (mm)], [Bill Depth (mm)], [Flipper Length (mm)], [Body Mass (g)], [Bill Length (mm)], [Bill Depth (mm)], [Flipper Length (mm)], [Body Mass (g)],\n    ),\n\n    // tinytable cell content after\n[Adelie], [40.39], [19.07], [192.4], [4043], [37.26], [17.62], [187.8], [3369],\n[Gentoo], [49.47], [15.72], [221.5], [5485], [45.56], [14.24], [212.7], [4680],\n[Chinstrap], [51.09], [19.25], [199.9], [3939], [46.57], [17.59], [191.7], [3527],\n\n    // tinytable footer after\n\n    table.footer(\n      repeat: false,\n      // tinytable notes after\n    table.cell(align: left, colspan: 9, text([_Notes_: Data from Palmer penguins dataset.])),\n    ),\n    \n\n  ) // end table\n\n  ]) // end align\n```\n\n:::\n:::\n\n\n\nSince the default backend of `modelsummary` is `tinytable`,\nyou can use the customization options of `tinytable` for `modelsummary`.\nIn @tbl-regression, I use `tinytable::group_tt()` function to group the regression results by the dependent variables\n\n\n\n::: {#tbl-regression .cell tbl-cap='Regression Results of Penguins'}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#let nhead = 2;\n#let nrow = 9;\n#let ncol = 7;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),), align: left,),\n(pairs: ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10),), align: center,),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    column-gutter: 5pt,\n    columns: (auto, auto, auto, auto, auto, auto, auto),\n    stroke: none,\n    align: (x, y) => {\n      let sarray = style-array.filter(a => \"align\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().align\n      } else {\n        left\n      }\n    },\n    fill: (x, y) => {\n      let sarray = style-array.filter(a => \"background\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().background\n      }\n    },\n table.hline(y: 2, start: 0, end: 7, stroke: 0.05em + black),\n table.hline(y: 10, start: 0, end: 7, stroke: 0.05em + black),\n table.hline(y: 11, start: 0, end: 7, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 7, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[ ],table.cell(stroke: (bottom: .05em + black), colspan: 3, align: center)[Bill Length (mm)],table.cell(stroke: (bottom: .05em + black), colspan: 3, align: center)[Body Mass (g)],\n[ ], [(1)], [(2)], [(3)], [(4)], [(5)], [(6)],\n    ),\n\n    // tinytable cell content after\n[Chinstrap], [10.042\\*\\*], [10.010\\*\\*], [10.037\\*\\*], [32.426], [26.924], [27.229],\n[], [(0.432)], [(0.341)], [(0.340)], [(67.512)], [(46.483)], [(46.587)],\n[Gentoo], [8.713\\*\\*], [8.698\\*\\*], [8.693\\*\\*], [1375.354\\*\\*], [1377.858\\*\\*], [1377.813\\*\\*],\n[], [(0.360)], [(0.287)], [(0.286)], [(56.148)], [(39.104)], [(39.163)],\n[Male], [], [3.694\\*\\*], [3.694\\*\\*], [], [667.555\\*\\*], [667.560\\*\\*],\n[], [], [(0.255)], [(0.254)], [], [(34.704)], [(34.755)],\n[Year], [], [], [0.324\\*], [], [], [3.629],\n[], [], [], [(0.156)], [], [], [(21.428)],\n[Observations], [342], [333], [333], [342], [333], [333],\n\n    // tinytable footer after\n\n    table.footer(\n      repeat: false,\n      // tinytable notes after\n    table.cell(align: left, colspan: 7, text([\\+ p \\< 0.1, \\* p \\< 0.05, \\*\\* p \\< 0.01])),\n    table.cell(align: left, colspan: 7, text([\\_Notes\\_: Data from Palmer penguins dataset.])),\n    ),\n    \n\n  ) // end table\n\n  ]) // end align\n```\n\n:::\n:::\n\n\n\nWhile `tinytable` generates compatible tables between LaTeX and Typst,\nit does not support LaTeX math expressions for Typst tables.\nI think the compatibility between LaTeX and Typst is crucial for academic writing\nbecause it guarantees that the document can be easily converted to LaTeX for submission to journals.\n\nA workaround is to use [MiTeX](https://typst.app/universe/package/mitex/),\na Typst package that allows you to use LaTeX math expressions in Typst.\nI write a custom theme for `tinytable` to convert LaTeX math expressions to MiTeX expressions.\nThe following table includes LaTeX math expressions but will be converted to MiTeX expressions in the Typst output.\n\n\n\n::: {.cell}\n\n:::\n\n::: {#tbl-math .cell tbl-cap='Math Symbols'}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#let nhead = 1;\n#let nrow = 3;\n#let ncol = 1;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 0), (0, 1), (0, 2), (0, 3),), ),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    columns: (auto),\n    stroke: none,\n    align: (x, y) => {\n      let sarray = style-array.filter(a => \"align\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().align\n      } else {\n        left\n      }\n    },\n    fill: (x, y) => {\n      let sarray = style-array.filter(a => \"background\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().background\n      }\n    },\n table.hline(y: 1, start: 0, end: 1, stroke: 0.05em + black),\n table.hline(y: 4, start: 0, end: 1, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 1, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[Math],\n    ),\n\n    // tinytable cell content after\n[#mitex(`\\alpha`)],\n[#mitex(`a_{it}`)],\n[#mitex(`e^{i\\pi} + 1 = 0`)],\n\n    // tinytable footer after\n\n  ) // end table\n\n  ]) // end align\n```\n\n:::\n:::\n\n\n\n# Last words\n\nI made this template for my working papers, so it may not be suitable for other fields than economics.\nI am happy to receive feedback and suggestions for improvement.\n\n\n\n{{< appendix >}}\n\n\n\n\n# Supplemental Figures\n\nThe section numbering will be changed to \"A.1.1\" in the appendix.\nThe second section in the appendix will be \"B\".\nOn the other hand, the figure numbering will be reset to \"A.1\", \"A.2\"\nso that it is clear that these figures are part of the appendix.\nThe \"A\" stands for the \"Appendix\", not the section numbering.\n\n![**The Great Wave off Kanagawa**. A woodblock print by @katsushika1831.](img/hokusai_kanagawa.jpg){#fig-img}\n\n\n\n\n{{< pagebreak >}}\n\n\n\n<!-- Bibliography -->\n",
    "supporting": [
      "template-full_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}